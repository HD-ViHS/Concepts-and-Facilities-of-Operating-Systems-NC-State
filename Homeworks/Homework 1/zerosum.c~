#include <unistd.h>
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <math.h>
#include <stdbool.h>

// Print out an error message and exit.
static void fail( char const *message ) {
  fprintf( stderr, "%s\n", message );
  exit( 1 );
}

// Print out a usage message, then exit.
static void usage() {
  printf( "usage: zerosum <workers>\n" );
  printf( "       zerosum <workers> report\n" );
  exit( 1 );
}

// Input sequence of values.
int *vList;

// Number of values on the list.
int vCount = 0;

// Capacity of the list of values.
int vCap = 0;

// Read the list of values.
void readList() {
  // Set up initial list and capacity.
  vCap = 5;
  vList = (int *) malloc( vCap * sizeof( int ) );

  // Keep reading as many values as we can.
  int v;
  while ( scanf( "%d", &v ) == 1 ) {
    // Grow the list if needed.
    if ( vCount >= vCap ) {
      vCap *= 2;
      vList = (int *) realloc( vList, vCap * sizeof( int ) );
    }

    // Store the latest value in the next array slot.
    vList[ vCount++ ] = v;
  }
}

void processDigits(int index, int workers, bool report, int pfd[]) {
  int indexCount = index;
  int numOfSequences = 0;
  int pairCount = 0;

  close(pfd[0]);
  
  while(indexCount < vcount) {
    int innerIndex = indexCount;
    int sum == 0;
    while(innerIndex < vcount) {
      sum += vlist[innerIndex];
      if (sum == 0) {
	numOfSequences++;
	if(report)
	  printf("%d .. %d\n", indexCount, innerIndex);
      }
      innerIndex++;
    }
    indexCount += workers;
  }
  lockf(pfd[1], F_LOCK, 0);
  write(pfd[1], &numOfSequences, sizeof(int));
  lockf(pfd[1], F_ULOCK, 0);

  exit();
}

int main( int argc, char *argv[] ) {
  bool report = false;
  int workers = 4;
  
  // Parse command-line arguments.
  if ( argc < 2 || argc > 3 )
    usage();
  
  if ( sscanf( argv[ 1 ], "%d", &workers ) != 1 ||
       workers < 1 )
    usage();

  // If there's a second argument, it better be the word, report
  if ( argc == 3 ) {
    if ( strcmp( argv[ 2 ], "report" ) != 0 )
      usage();
    report = true;
  }

  readList();
  int pfd[2];
  if (pipe(pfd) != 0)
    fail("Failed to create pipe");

  for(int i = 0; i < workers; i++) {
    int pid = fork();
    if (pid < 0) {
      fail("Failure to fork child process");
    } else if (pid == 0) {
      processDigits(i, workers, report, pfd);
    }
  }
  // All children will be closed after this while loop
  close(pfd[1]);

  int buffer;
  int numOfSequences;

  for(int i = 0; i < workers; i++) {
    read(pfd[0], buffer);
    numOfSequences += buffer;
  }

  for(int i = 0; i < workers; i++) {
    wait();
  }

  printf("Total: %d\n", numOfSequences);
  
  return 0;
}
